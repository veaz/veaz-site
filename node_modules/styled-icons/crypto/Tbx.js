import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import * as React from 'react';
import styled from 'styled-components';
import validProp from '@emotion/is-prop-valid';
const StyledIcon = React.forwardRef((props, ref) => {
  const title = props.title,
        size = props.size,
        otherProps = _objectWithoutProperties(props, ["title", "size"]);

  const iconProps = {
    viewBox: '0 0 32 32',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    "fill": "currentColor"
  };
  const svgProps = Object.keys(otherProps).reduce((p, k) => {
    if (validProp(k)) {
      p[k] = otherProps[k];
    }

    return p;
  }, {});
  return React.createElement("svg", _extends({}, iconProps, svgProps, {
    ref: ref
  }), title && React.createElement("title", {
    key: "Tbx-title"
  }, title), React.createElement("path", {
    d: "M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16zm-.3-4.6c6.462 0 11.7-5.238 11.7-11.7C27.4 9.238 22.162 4 15.7 4 9.238 4 4 9.238 4 15.7c0 6.462 5.238 11.7 11.7 11.7zm2.89-7.7l2.35-4-2.62-4.48h-5.24l-2.62 4.48 2.35 4 2.89-4 2.89 4zm.86-10.4l3.74 6.4-3.74 6.4h-7.49l-3.75-6.4 3.74-6.4h7.5z",
    key: "k0"
  }));
});
export const Tbx = styled(StyledIcon).withConfig({
  displayName: "Tbx",
  componentId: "sc-7do19v-0"
})(["display:inline-block;vertical-align:middle;overflow:hidden;"]);
Tbx.displayName = 'Tbx';
export const TbxDimensions = {
  height: 32,
  width: 32
};