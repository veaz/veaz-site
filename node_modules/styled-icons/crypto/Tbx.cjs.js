"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TbxDimensions = exports.Tbx = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _isPropValid = _interopRequireDefault(require("@emotion/is-prop-valid"));

var StyledIcon = React.forwardRef(function (props, ref) {
  var title = props.title,
      size = props.size,
      otherProps = (0, _objectWithoutProperties2.default)(props, ["title", "size"]);
  var iconProps = {
    viewBox: '0 0 32 32',
    height: props.height !== undefined ? props.height : size,
    width: props.width !== undefined ? props.width : size,
    // @ts-ignore - aria is not always defined on SVG in React TypeScript types
    'aria-hidden': title == null ? 'true' : undefined,
    focusable: 'false',
    role: title != null ? 'img' : undefined,
    "fill": "currentColor"
  };
  var svgProps = Object.keys(otherProps).reduce(function (p, k) {
    if ((0, _isPropValid.default)(k)) {
      p[k] = otherProps[k];
    }

    return p;
  }, {});
  return React.createElement("svg", (0, _extends2.default)({}, iconProps, svgProps, {
    ref: ref
  }), title && React.createElement("title", {
    key: "Tbx-title"
  }, title), React.createElement("path", {
    d: "M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16zm-.3-4.6c6.462 0 11.7-5.238 11.7-11.7C27.4 9.238 22.162 4 15.7 4 9.238 4 4 9.238 4 15.7c0 6.462 5.238 11.7 11.7 11.7zm2.89-7.7l2.35-4-2.62-4.48h-5.24l-2.62 4.48 2.35 4 2.89-4 2.89 4zm.86-10.4l3.74 6.4-3.74 6.4h-7.49l-3.75-6.4 3.74-6.4h7.5z",
    key: "k0"
  }));
});
var Tbx = (0, _styledComponents.default)(StyledIcon).withConfig({
  displayName: "Tbxcjs__Tbx",
  componentId: "yyofbp-0"
})(["display:inline-block;vertical-align:middle;overflow:hidden;"]);
exports.Tbx = Tbx;
Tbx.displayName = 'Tbx';
var TbxDimensions = {
  height: 32,
  width: 32
};
exports.TbxDimensions = TbxDimensions;